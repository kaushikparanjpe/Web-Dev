#pragma checksum "C:\Users\hp\Documents\NEU Subjects\Fall 2018\WebDev\FinalProject\Part3\ShoppingCart\ShoppingCart.Client\Pages\Cart.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "319dbb50a81fa6efcb4a310b17b4b7ed8b10fc83"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ShoppingCart.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using ShoppingCart.Client;
    using ShoppingCart.Client.Shared;
    using ShoppingCart.Shared.Models;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(UserMainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/cart")]
    public class Cart : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 60 "C:\Users\hp\Documents\NEU Subjects\Fall 2018\WebDev\FinalProject\Part3\ShoppingCart\ShoppingCart.Client\Pages\Cart.cshtml"
           
    List<Orders> orders = OrderList.cartItems;
    Dictionary<string, Products> po;
    bool btnDisable = true;
    string msg = "No Items in Cart..!";



    private void RemoveFromCart(Orders ord)
    {
        orders.Remove(ord);
        this.StateHasChanged();
    }


    private async Task PlaceOrder()
    {
        foreach (Orders o in orders)
        {
            await Http.PostJsonAsync("/api/Orders/", o);
        }
        orders.Clear();
        msg = "Orders has been Placed...!";
    }

    protected override async Task OnInitAsync()
    {
        po = new Dictionary<string, Products>();
        foreach (Orders o in orders)
        {
            Products prod = await Http.GetJsonAsync<Products>("/api/Product/" + o.Product);
            po.Add(prod.Id.ToString(), prod);
            Console.WriteLine("Product:" + prod.Id.ToString());
            Console.WriteLine("Product:" + po[prod.Id.ToString()]);

        }

        if (orders.Count > 0)
        {
            btnDisable = false;
        }

    }



#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
